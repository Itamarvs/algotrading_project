var = {"nbformat": 4, "nbformat_minor": 0, "metadata": {"colab": {"name": "OXF ALG M4U3 IDE activity_v03_IS.ipynb",
                                                                  "provenance": [
                                                                      {"file_id": "1_rkINPNRMYrH8qVLme4ZGsiiB-C0nWpz",
                                                                       "timestamp": 1627392390206}],
                                                                  "collapsed_sections": [],
                                                                  "toc_visible": true},
                                                        "kernelspec": {"display_name": "Python 3", "language": "python",
                                                                       "name": "python3"}, "language_info": {
        "codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python",
        "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.6.4"}}, "cells": [
    {"cell_type": "markdown", "metadata": {"id": "THA_qGa-tvoR"},
     "source": ["# IDE activity: Time series momentum (Part 2)"]},
    {"cell_type": "markdown", "metadata": {"id": "_jlkoRhpkC7E"}, "source": [
        "In this activity, you will demonstrate the advantages of utilising time series momentum strategies. In its simplest form, a time series momentum strategy uses an asset's past returns as an indicator for the current price trend. That is, the stronger the price trend, the larger the position the strategy enters to follow this trend. Momentum strategies are popular diversifiers in portfolio construction, given their low (or sometimes negative) correlations with equities.\n",
        "\n",
        "The activity starts by first loading the data and calculating the returns. Following this, you will be introduced to a basic long-only strategy as a benchmark, working with the S&P 500 time series data set. You will then measure the success of the strategy using standard performance metrics, including the Sharpe, Sortino, and Calmar ratios, to assess performance of this long-only strategy. \n",
        "\n",
        "Next, you will explore the utility of volatility scaling to improve risk-adjusted returns (see [Harvey et al. 2018](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3175538) for more information). After volatility scaling, you will implement a basic time series momentum strategy first introduced in [Moskowitz et al. 2012](https://research.cbs.dk/en/publications/time-series-momentum), and explore its performance across different trading horizons, before moving to a more sophisticated time series momentum strategy that makes use of moving average convergence divergence (MACD) indicators, as reviewed in [Baz et al. 2015](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2695101). \n",
        "\n",
        "Finally, you will analyse the benefits of using time series momentum strategies as diversifiers when combining them in a portfolio with long-only strategies.\n",
        "\n",
        "Over recent years, the performance of such classical time series momentum strategies has been declining, which has led to the development of more advanced, deep learning-based trading strategies which have been shown to greatly improve these existing methodologies (see [Lim et al. 2019](https://arxiv.org/abs/1904.04912) for more information)."]},
    {"cell_type": "markdown", "metadata": {"id": "uM_sJTnBtvKA"}, "source": ["## 1. Import packages and libraries"]},
    {"cell_type": "markdown", "metadata": {"id": "kfl2LRQG4q2O"}, "source": [
        "Before continuing, it is important to import the various packages and libraries that will be used to analyse and visualise the data. This is achieved using the following lines of code."]},
    {"cell_type": "code", "metadata": {"id": "O4m0X4zeiImu"},
     "source": ["# Importing packages to deal with data\n", "import pandas as pd      \n", "import numpy as np   \n",
                "import datetime as dt\n", "import yfinance as yf\n", "# Importing packages to plot\n",
                "import matplotlib.pyplot as plt"], "execution_count": null, "outputs": []},
    {"cell_type": "markdown", "metadata": {"id": "HD_81OhLueSc"},
     "source": ["## 2. Loading the data and calculating returns"]},
    {"cell_type": "markdown", "metadata": {"id": "vdAWD63Wi14N"}, "source": [
        "To load the required data, you can use the [Yahoo Finance API](https://pypi.org/project/yfinance/) to download S&P 500 time series data and print the data to ensure that it has loaded correctly."]},
    {"cell_type": "code",
     "metadata": {"id": "bknbCBUWiOR2", "colab": {"base_uri": "https://localhost:8080/", "height": 450},
                  "executionInfo": {"status": "ok", "timestamp": 1626766087084, "user_tz": -120, "elapsed": 1918,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "67e69639-4051-4b9f-bf04-70520b1612e2"},
     "source": ["# Loading data for S&P 500 time-series\n", "data_source = yf.Ticker('^GSPC')\n", "\n",
                "# Alternatively can load FTSE100\n", "# data_source = yf.Ticker('^FTSE')\n", "\n",
                "data_hist = data_source.history(period='max')\n", "# Print data history\n", "data_hist"],
     "execution_count": null, "outputs": [{"output_type": "execute_result", "data": {
        "text/html": ["<div>\n", "<style scoped>\n", "    .dataframe tbody tr th:only-of-type {\n",
                      "        vertical-align: middle;\n", "    }\n", "\n", "    .dataframe tbody tr th {\n",
                      "        vertical-align: top;\n", "    }\n", "\n", "    .dataframe thead th {\n",
                      "        text-align: right;\n", "    }\n", "</style>\n",
                      "<table border=\"1\" class=\"dataframe\">\n", "  <thead>\n",
                      "    <tr style=\"text-align: right;\">\n", "      <th></th>\n", "      <th>Open</th>\n",
                      "      <th>High</th>\n", "      <th>Low</th>\n", "      <th>Close</th>\n",
                      "      <th>Volume</th>\n", "      <th>Dividends</th>\n", "      <th>Stock Splits</th>\n",
                      "    </tr>\n", "    <tr>\n", "      <th>Date</th>\n", "      <th></th>\n", "      <th></th>\n",
                      "      <th></th>\n", "      <th></th>\n", "      <th></th>\n", "      <th></th>\n",
                      "      <th></th>\n", "    </tr>\n", "  </thead>\n", "  <tbody>\n", "    <tr>\n",
                      "      <th>1927-12-30</th>\n", "      <td>17.660000</td>\n", "      <td>17.660000</td>\n",
                      "      <td>17.660000</td>\n", "      <td>17.660000</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n", "    <tr>\n",
                      "      <th>1928-01-03</th>\n", "      <td>17.760000</td>\n", "      <td>17.760000</td>\n",
                      "      <td>17.760000</td>\n", "      <td>17.760000</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n", "    <tr>\n",
                      "      <th>1928-01-04</th>\n", "      <td>17.719999</td>\n", "      <td>17.719999</td>\n",
                      "      <td>17.719999</td>\n", "      <td>17.719999</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n", "    <tr>\n",
                      "      <th>1928-01-05</th>\n", "      <td>17.549999</td>\n", "      <td>17.549999</td>\n",
                      "      <td>17.549999</td>\n", "      <td>17.549999</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n", "    <tr>\n",
                      "      <th>1928-01-09</th>\n", "      <td>17.500000</td>\n", "      <td>17.500000</td>\n",
                      "      <td>17.500000</td>\n", "      <td>17.500000</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n", "    <tr>\n", "      <th>...</th>\n",
                      "      <td>...</td>\n", "      <td>...</td>\n", "      <td>...</td>\n", "      <td>...</td>\n",
                      "      <td>...</td>\n", "      <td>...</td>\n", "      <td>...</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>2021-07-13</th>\n", "      <td>4381.069824</td>\n",
                      "      <td>4392.370117</td>\n", "      <td>4366.919922</td>\n", "      <td>4369.209961</td>\n",
                      "      <td>3166900000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>2021-07-14</th>\n", "      <td>4380.109863</td>\n",
                      "      <td>4393.680176</td>\n", "      <td>4362.359863</td>\n", "      <td>4374.299805</td>\n",
                      "      <td>3213870000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>2021-07-15</th>\n", "      <td>4369.020020</td>\n",
                      "      <td>4369.020020</td>\n", "      <td>4340.700195</td>\n", "      <td>4360.029785</td>\n",
                      "      <td>3226930000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>2021-07-16</th>\n", "      <td>4367.430176</td>\n",
                      "      <td>4375.089844</td>\n", "      <td>4322.529785</td>\n", "      <td>4327.160156</td>\n",
                      "      <td>3165160000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>2021-07-19</th>\n", "      <td>4296.399902</td>\n",
                      "      <td>4296.399902</td>\n", "      <td>4233.129883</td>\n", "      <td>4258.490234</td>\n",
                      "      <td>4155790000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "    </tr>\n",
                      "  </tbody>\n", "</table>\n", "<p>19642 rows × 7 columns</p>\n", "</div>"],
        "text/plain": ["                   Open         High  ...  Dividends  Stock Splits\n",
                       "Date                                  ...                         \n",
                       "1927-12-30    17.660000    17.660000  ...          0             0\n",
                       "1928-01-03    17.760000    17.760000  ...          0             0\n",
                       "1928-01-04    17.719999    17.719999  ...          0             0\n",
                       "1928-01-05    17.549999    17.549999  ...          0             0\n",
                       "1928-01-09    17.500000    17.500000  ...          0             0\n",
                       "...                 ...          ...  ...        ...           ...\n",
                       "2021-07-13  4381.069824  4392.370117  ...          0             0\n",
                       "2021-07-14  4380.109863  4393.680176  ...          0             0\n",
                       "2021-07-15  4369.020020  4369.020020  ...          0             0\n",
                       "2021-07-16  4367.430176  4375.089844  ...          0             0\n",
                       "2021-07-19  4296.399902  4296.399902  ...          0             0\n", "\n",
                       "[19642 rows x 7 columns]"]}, "metadata": {"tags": []}, "execution_count": 4}]},
    {"cell_type": "markdown", "metadata": {"id": "jyWkacNAulgm"}, "source": [
        "You can then filter the data to include a specified time frame. In this case, you will be filtering data between the years of 1990 and 2009, while checking for null or zero entries."]},
    {"cell_type": "code", "metadata": {"id": "FYdPw3rcpVKe", "colab": {"base_uri": "https://localhost:8080/"},
                                       "executionInfo": {"status": "ok", "timestamp": 1626766087085, "user_tz": -120,
                                                         "elapsed": 22, "user": {"displayName": "Graeme Glass",
                                                                                 "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                 "userId": "05323015638425264635"}},
                                       "outputId": "1028f7d3-1ecb-434f-cdda-099c4822532d"},
     "source": ["# Filter data from 1990\n", "data = data_hist[\"1990-01-01\":\"2009-12-31\"].copy()\n", "\n",
                "# check for null and zero entries \n", "len(\n", "  data[\n", "    data.Close.isna() |\n",
                "    data.Close.isnull() |\n", "    data.Close < 1e-8\n", "  ]\n", ")"], "execution_count": null,
     "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["0"]}, "metadata": {"tags": []},
                  "execution_count": 5}]}, {"cell_type": "markdown", "metadata": {"id": "kMcIogNrkC7I"}, "source": [
        "Before continuing, you can do a quick sanity check of the data by plotting the prices using the [matplotlib](https://matplotlib.org/) library. "]},
    {"cell_type": "code",
     "metadata": {"id": "gaXB5ZtspJ0_", "colab": {"base_uri": "https://localhost:8080/", "height": 269},
                  "executionInfo": {"status": "ok", "timestamp": 1626766087085, "user_tz": -120, "elapsed": 16,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "8c9b1c2d-2891-4783-ae3e-e58d999c638c"},
     "source": ["# Plotting prices\n", "data.Close.plot()\n", "plt.ylabel(\"Price\");"], "execution_count": null,
     "outputs": [{"output_type": "display_data", "data": {
         "image/png": "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\n",
         "text/plain": ["<Figure size 432x288 with 1 Axes>"]}, "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "mOq8cNBkvUn8"}, "source": [
        "With the price data correctly loaded, you will next add a buffer of one year to the beginning of the time series to allow for sufficient history when using rolling estimates later."]},
    {"cell_type": "code", "metadata": {"id": "hwqrapRc7C14"},
     "source": ["data = data_hist[\"1988-12-01\":\"2009-12-31\"].copy()"], "execution_count": null, "outputs": []},
    {"cell_type": "markdown", "metadata": {"id": "1-cFRlE3lSxn"}, "source": [
        "After correctly loading the price series data and adding the one year buffer, you will next calculate the returns from time $t-\\tau$ to $t$, using the following formula, \n",
        "\\begin{equation}\n", "r_{t-\\tau,t} = \\dfrac{p_t-p_{t-\\tau}}{p_{t-\\tau}}, \n", "\\end{equation}\n",
        "where $p_t$ is price at time $t$ and $\\tau$ is the offset, the number of days we calculate the returns over."]},
    {"cell_type": "markdown", "metadata": {"id": "KohplYCHlVVn"},
     "source": ["**Exercise: Complete the following function.**"]},
    {"cell_type": "code", "metadata": {"id": "AliS1aB-x6LZ"},
     "source": ["def calc_returns(srs, offset=1):\n", "    \"\"\" \n", "        Parameters:\n",
                "              srs: pandas time-series\n", "              offset: number of days to offset returns\n",
                "        Return:\n", "          Calculates the returns over the past number of days \n",
                "          specified by offset\n", "    \"\"\"\n", "    \n", "    ### Enter code here:\n",
                "    returns = srs / srs.shift(offset) - 1.0\n", "    ###\n", "    \n", "    return returns"],
     "execution_count": null, "outputs": []}, {"cell_type": "markdown", "metadata": {"id": "n3CzPD82mzY9"}, "source": [
        "Next, you want to print the return of the previous day as well as the following day's return, which you will use to evaluate the strategy."]},
    {"cell_type": "code",
     "metadata": {"id": "D_KqY0T80PAX", "colab": {"base_uri": "https://localhost:8080/", "height": 235},
                  "executionInfo": {"status": "ok", "timestamp": 1626766087087, "user_tz": -120, "elapsed": 15,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "89f681b3-7161-4238-d672-2c495f621e99"},
     "source": ["data[\"daily_returns\"] = calc_returns(data[\"Close\"])\n",
                "data[\"next_day_returns\"] = data[\"daily_returns\"].shift(-1)\n", "data.head()"],
     "execution_count": null, "outputs": [{"output_type": "execute_result", "data": {
        "text/html": ["<div>\n", "<style scoped>\n", "    .dataframe tbody tr th:only-of-type {\n",
                      "        vertical-align: middle;\n", "    }\n", "\n", "    .dataframe tbody tr th {\n",
                      "        vertical-align: top;\n", "    }\n", "\n", "    .dataframe thead th {\n",
                      "        text-align: right;\n", "    }\n", "</style>\n",
                      "<table border=\"1\" class=\"dataframe\">\n", "  <thead>\n",
                      "    <tr style=\"text-align: right;\">\n", "      <th></th>\n", "      <th>Open</th>\n",
                      "      <th>High</th>\n", "      <th>Low</th>\n", "      <th>Close</th>\n",
                      "      <th>Volume</th>\n", "      <th>Dividends</th>\n", "      <th>Stock Splits</th>\n",
                      "      <th>daily_returns</th>\n", "      <th>next_day_returns</th>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>Date</th>\n", "      <th></th>\n", "      <th></th>\n",
                      "      <th></th>\n", "      <th></th>\n", "      <th></th>\n", "      <th></th>\n",
                      "      <th></th>\n", "      <th></th>\n", "      <th></th>\n", "    </tr>\n", "  </thead>\n",
                      "  <tbody>\n", "    <tr>\n", "      <th>1988-12-01</th>\n", "      <td>273.679993</td>\n",
                      "      <td>273.700012</td>\n", "      <td>272.269989</td>\n", "      <td>272.489990</td>\n",
                      "      <td>129380000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n", "      <td>NaN</td>\n",
                      "      <td>-0.002495</td>\n", "    </tr>\n", "    <tr>\n", "      <th>1988-12-02</th>\n",
                      "      <td>272.489990</td>\n", "      <td>272.489990</td>\n", "      <td>270.470001</td>\n",
                      "      <td>271.809998</td>\n", "      <td>124610000</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>-0.002495</td>\n", "      <td>0.011479</td>\n", "    </tr>\n",
                      "    <tr>\n", "      <th>1988-12-05</th>\n", "      <td>274.929993</td>\n",
                      "      <td>275.619995</td>\n", "      <td>271.809998</td>\n", "      <td>274.929993</td>\n",
                      "      <td>144660000</td>\n", "      <td>0</td>\n", "      <td>0</td>\n",
                      "      <td>0.011479</td>\n", "      <td>0.009675</td>\n", "    </tr>\n", "    <tr>\n",
                      "      <th>1988-12-06</th>\n", "      <td>274.929993</td>\n", "      <td>277.890015</td>\n",
                      "      <td>274.619995</td>\n", "      <td>277.589996</td>\n", "      <td>158340000</td>\n",
                      "      <td>0</td>\n", "      <td>0</td>\n", "      <td>0.009675</td>\n",
                      "      <td>0.001945</td>\n", "    </tr>\n", "    <tr>\n", "      <th>1988-12-07</th>\n",
                      "      <td>277.589996</td>\n", "      <td>279.010010</td>\n", "      <td>277.339996</td>\n",
                      "      <td>278.130005</td>\n", "      <td>148360000</td>\n", "      <td>0</td>\n",
                      "      <td>0</td>\n", "      <td>0.001945</td>\n", "      <td>-0.005537</td>\n", "    </tr>\n",
                      "  </tbody>\n", "</table>\n", "</div>"],
        "text/plain": ["                  Open        High  ...  daily_returns  next_day_returns\n",
                       "Date                                ...                                 \n",
                       "1988-12-01  273.679993  273.700012  ...            NaN         -0.002495\n",
                       "1988-12-02  272.489990  272.489990  ...      -0.002495          0.011479\n",
                       "1988-12-05  274.929993  275.619995  ...       0.011479          0.009675\n",
                       "1988-12-06  274.929993  277.890015  ...       0.009675          0.001945\n",
                       "1988-12-07  277.589996  279.010010  ...       0.001945         -0.005537\n", "\n",
                       "[5 rows x 9 columns]"]}, "metadata": {"tags": []}, "execution_count": 9}]},
    {"cell_type": "markdown", "metadata": {"id": "tFwrhgmsnKCE"}, "source": [
        "It is sometimes advisable to [winsorise](https://en.wikipedia.org/wiki/Winsorizing) the data by capping or flooring it to be within 5 times its exponentially weighted moving (EWM) standard deviations from its EWM average. In this way, you can mitigate the effects of outliers when calculating the trend. You can winsorise the data and then plot the daily returns using the following lines of code."]},
    {"cell_type": "code",
     "metadata": {"id": "xQ8htMaVxp66", "colab": {"base_uri": "https://localhost:8080/", "height": 265},
                  "executionInfo": {"status": "ok", "timestamp": 1626766087088, "user_tz": -120, "elapsed": 15,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "f63b70eb-464e-4be1-8cfe-3f157b1600d1"},
     "source": ["# Limit data to within 5 standard deviations\n",
                "VOL_THRESHOLD = 5 # Winsorise the data by capping it to be within 5 x standard deviations \n",
                "data[\"srs\"] = data[\"Close\"]\n", "\n",
                "SMOOTH_WINDOW = 252 # Smooth annual lookback window (Approx. 252 trading days/year)\n", "\n", "\n",
                "ewm = data[\"srs\"].ewm(halflife=SMOOTH_WINDOW)\n",
                "# calculate the exponentially weighted moving mean\n", "means = ewm.mean()\n",
                "# calculate the exponentially weighted moving standard deviation\n", "stds = ewm.std()\n", "\n",
                "# Calculating upper bound\n", "ub = means + VOL_THRESHOLD * stds\n",
                "data[\"srs\"] = np.minimum(data[\"srs\"], ub);\n", "\n", "# Calculating lower bound\n",
                "lb = means - VOL_THRESHOLD * stds\n", "data[\"srs\"] = np.maximum(data[\"srs\"], lb);\n", "\n",
                "# Next day return without capping but returns for signal with capping\n",
                "data[\"daily_returns\"] = calc_returns(data[\"srs\"],1)\n", "\n",
                "plt.plot(data[\"daily_returns\"]);"], "execution_count": null, "outputs": [
        {"output_type": "display_data", "data": {
            "image/png": "\n",
            "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
         "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "4GNh83CJJdBj"}, "source": ["## 3. Long-only strategy"]},
    {"cell_type": "markdown", "metadata": {"id": "Pb2dHSKOJ1PM"},
     "source": ["You will first consider a very simple long-only strategy as a benchmark.\n",
                "For the long-only strategy, you take a maximum long position for all times $t$ in time horizon $T$. In terms of a normalised trading signal $X_t\\in[-1,1]$, where $X_t = -1$ indicates a maximum short position whereas $X_t = 1$ indicates a maximum long position, this amounts to choosing \n",
                "\\begin{equation}\n", "X_t = 1, \\forall t \\in T.\n", "\\end{equation}\n", "\n",
                "The cumulative return of this strategy is simply\n", "\\begin{equation}\n",
                "\\prod_{t=0}^{T-1}(1+r_{t+1,t}) - 1\n", "\\end{equation}\n", "\n",
                "You now plot the performance. In order to be able to easily compare different strategies later, you can add an option to scale returns to a fixed volatility. "]},
    {"cell_type": "code", "metadata": {"id": "lt3LIpKThY0H"},
     "source": ["# Rescale volatility for comparison\n", "def rescale_to_target_volatility(srs,vol=0.15):\n",
                "    return srs *  vol / srs.std() / np.sqrt(252)\n", "\n",
                "def plot_captured_returns(next_day_captured, plot_with_equal_vol = None):\n",
                "    \"\"\" Parameters:\n", "            next_day_captured: time-series of next day returns\n",
                "        Return:\n", "            matplotlib.pyplot of cumulative returns \"\"\"\n", "    \n",
                "    if plot_with_equal_vol is not None:\n",
                "        srs = rescale_to_target_volatility(next_day_captured.copy(),vol=plot_with_equal_vol)\n",
                "    else:\n", "        srs = next_day_captured.copy()\n", "        \n",
                "    ((srs.shift(1) + 1).cumprod() - 1).plot()\n", "    plt.ylabel(\"Cumulative  returns\");"],
     "execution_count": null, "outputs": []}, {"cell_type": "code", "metadata": {"id": "-bwD0B5Ywp07", "colab": {
        "base_uri": "https://localhost:8080/", "height": 272}, "executionInfo": {"status": "ok",
                                                                                 "timestamp": 1626766088456,
                                                                                 "user_tz": -120, "elapsed": 34,
                                                                                 "user": {"displayName": "Graeme Glass",
                                                                                          "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                          "userId": "05323015638425264635"}},
                                                                                 "outputId": "a7217849-56cb-4274-d5a4-8c7ec9d936fb"},
                                               "source": ["# Load long-only returns and plot\n",
                                                          "captured_returns_longonly = data['next_day_returns'][\"1990-01-01\":]\n",
                                                          "plot_captured_returns(captured_returns_longonly)"],
                                               "execution_count": null, "outputs": [{"output_type": "display_data",
                                                                                     "data": {
                                                                                         "image/png": "\n",
                                                                                         "text/plain": [
                                                                                             "<Figure size 432x288 with 1 Axes>"]},
                                                                                     "metadata": {"tags": [],
                                                                                                  "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "LXR0jPtakC7M"}, "source": [
        "So far, the results look good. While plots give a good indication as to how a strategy of choice performs, it would be more useful to measure the performance of this strategy using some performance metrics."]},
    {"cell_type": "markdown", "metadata": {"id": "ofbvXGvl9iVO"}, "source": ["### 3.1 Performance metrics"]},
    {"cell_type": "markdown", "metadata": {"id": "TDNthsZg0REf"}, "source": [
        "In this section, you will define metrics commonly used to measure the success of trading strategies. Many of the performance metrics are intuitive and, for those that are not, links are provided that expand on them. \n",
        "\n", "Metrics (annualised by default, $\\tau = 252$):\n",
        "* $\\textrm{Returns}$ $:= \\mathbb{E}[R_t]\\cdot \\tau$\n",
        "* [$\\textrm{Volatility}$]( https://en.wikipedia.org/wiki/Volatility_%28finance%29 ): $= \\sqrt{\\mathrm{Var}[R_t] \\cdot \\tau}$\n",
        "* [$\\textrm{Downside Deviation}$]( https://en.wikipedia.org/wiki/Downside_risk ) $:= \\sqrt{\\mathrm{Var}[Loss]\\cdot \\tau}$\n",
        "* [$\\textrm{Maximum drawdown (MDD)}$]( https://en.wikipedia.org/wiki/Drawdown_%28economics%29 )$: = \\max_t\\{\\max\\{R_0,R_1,\\ldots,R_t\\}-R_t$\\}\n",
        "* $\\textrm{PnL Ratio}$ $:= \\dfrac{\\mathbb{E}[\\mathrm{Profit}]}{\\mathbb{E}[\\mathrm{Loss}]}$\n", "\n",
        "Below you will define some of the above metrics."]}, {"cell_type": "code", "metadata": {"id": "1c8w03l90YXf"},
                                                               "source": ["def calc_downside_deviation(srs):\n",
                                                                          "    \"\"\" Parameters:\n",
                                                                          "            srs: pandas time-series\n",
                                                                          "        Return:\n",
                                                                          "            Downside Deviation (defined above) \"\"\"\n",
                                                                          "    negative_returns = srs.apply(lambda x: x if x < 0 else np.nan).dropna() * np.sqrt(252)\n",
                                                                          "    return negative_returns.std()\n", "\n",
                                                                          "def calc_max_drawdown(srs):\n",
                                                                          "    \"\"\" Parameters:\n",
                                                                          "            srs: pandas time-series\n",
                                                                          "        Return:\n",
                                                                          "            MDD (defined above) \"\"\"\n",
                                                                          "    cumulative_max = srs.cummax()\n",
                                                                          "    drawdown = cumulative_max - srs\n",
                                                                          "    return drawdown.max()\n", "\n",
                                                                          "def calc_profit_and_loss_ratio(srs):\n",
                                                                          "    \"\"\" Parameters:\n",
                                                                          "            srs: pandas time-series\n",
                                                                          "        Return:\n",
                                                                          "            PnL ratio (defined above) \"\"\"\n",
                                                                          "    return np.mean(srs[srs>0])/np.mean(np.abs(srs[srs<0]))"],
                                                               "execution_count": null, "outputs": []},
    {"cell_type": "markdown", "metadata": {"id": "8kurwR0fkC7N"},
     "source": ["The risk-adjusted performance metrics (annualised by default, $\\tau = 252$):\n",
                "* [$\\textrm{Sharpe Ratio}$](https://www.investopedia.com/terms/s/sharperatio.asp)$:=\\dfrac{\\mathbb{E}[R_t]}{\\sqrt{\\mathrm{Var}[R_t]}}\\cdot\\sqrt{\\tau}$\n",
                "* [$\\textrm{Sortino Ratio}$](https://www.investopedia.com/terms/s/sortinoratio.asp)$:=\\dfrac{\\mathbb{E}[R_t]}{\\sqrt{\\mathrm{Var}[Loss]}}\\cdot\\sqrt{\\tau}$\n",
                "* [$\\textrm{Calmar Ratio}$](https://www.investopedia.com/terms/c/calmarratio.asp)$:=\\dfrac{\\mathbb{E}[R_t]}{\\textrm{MDD}}\\cdot\\tau$\n",
                "\n",
                "**Exercise: Complete the below function definition by defining the risk-adjusted performance metrics.** \n",
                "\n", "That is, define the Sharpe, Sortino and Calmar ratios.\n"]}, {"cell_type": "code",
                                                                                     "metadata": {"id": "2OWEQG1skC7N",
                                                                                                  "colab": {
                                                                                                      "base_uri": "https://localhost:8080/"},
                                                                                                  "executionInfo": {
                                                                                                      "status": "ok",
                                                                                                      "timestamp": 1626766088458,
                                                                                                      "user_tz": -120,
                                                                                                      "elapsed": 33,
                                                                                                      "user": {
                                                                                                          "displayName": "Graeme Glass",
                                                                                                          "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                                          "userId": "05323015638425264635"}},
                                                                                                  "outputId": "1fa1a55e-b714-46bc-a02c-cf0399dc2710"},
                                                                                     "source": [
                                                                                         "def calculate_statistics(next_day_captured, print_results=True):\n",
                                                                                         "    \"\"\" Parameters:\n",
                                                                                         "            srs: pandas time-series\n",
                                                                                         "            print_results: bool to print statistics\n",
                                                                                         "        Return:\n",
                                                                                         "            Metrics and risk adjusted performance metrics (defined above) \"\"\"\n",
                                                                                         "    \n", "    \n",
                                                                                         "    srs = next_day_captured.shift(1)\n",
                                                                                         "    mean = srs.mean()\n",
                                                                                         "    vol = srs.std()\n",
                                                                                         "    \n",
                                                                                         "    # Calculate annualised metrics:\n",
                                                                                         "    returns_annualised =  mean*252\n",
                                                                                         "    vol_annualised = vol*np.sqrt(252)\n",
                                                                                         "    downside_devs_annualised = calc_downside_deviation(srs)\n",
                                                                                         "    max_drawdown = calc_max_drawdown(srs)\n",
                                                                                         "    pnl_ratio = calc_profit_and_loss_ratio(srs)\n",
                                                                                         "    perc_positive_return = len(srs[srs>0])/len(srs)\n",
                                                                                         "    \n", "    \"\"\"\n",
                                                                                         "        Exercise: complete the following ratio definitions\n",
                                                                                         "    \"\"\"\n",
                                                                                         "    # Calculate risk adjusted performance metrics:\n",
                                                                                         "    \n",
                                                                                         "    ### Enter code here:\n",
                                                                                         "    sharpe = mean/vol*np.sqrt(252)   \n",
                                                                                         "    sortino = mean / downside_devs_annualised * 252\n",
                                                                                         "    calmar = mean / max_drawdown * 252\n",
                                                                                         "    ###\n", "    \n",
                                                                                         "    # Print results\n",
                                                                                         "    if print_results:\n",
                                                                                         "        print(\"\\033[4mPerformance Metrics:\\033[0m\")\n",
                                                                                         "        print(f\"Annualised Returns = {returns_annualised:.2%}\")\n",
                                                                                         "        print(f\"Annualised Volatility = {vol_annualised:.2%}\")\n",
                                                                                         "        print(f\"Downside Deviation = {downside_devs_annualised:.2%}\")\n",
                                                                                         "        print(f\"Maximum Drawdown = {max_drawdown:.2%}\")\n",
                                                                                         "        print(f\"Sharpe Ratio = {sharpe:.2f}\")\n",
                                                                                         "        print(f\"Sortino Ratio = {sortino:.2f}\")\n",
                                                                                         "        print(f\"Calmar Ratio = {calmar:.2f}\")\n",
                                                                                         "        print(f\"Percentage of positive returns = {perc_positive_return:.2%}\")\n",
                                                                                         "        print(f\"Profit/Loss ratio = {pnl_ratio:.3f}\")\n",
                                                                                         "   \n",
                                                                                         "    # Return performance metrics\n",
                                                                                         "    return {\n",
                                                                                         "        \"returns_annualised\":  returns_annualised,\n",
                                                                                         "        \"vol_annualised\": vol_annualised,\n",
                                                                                         "        \"downside_deviation_annualised\": downside_devs_annualised,\n",
                                                                                         "        \"max_drawdown\": max_drawdown,\n",
                                                                                         "        \"sharpe\": sharpe,\n",
                                                                                         "        \"sortino\": sortino,\n",
                                                                                         "        \"calmar\": calmar,\n",
                                                                                         "        \"pnl_ratio\": pnl_ratio,\n",
                                                                                         "      }\n", "\n",
                                                                                         "# Calculate performance metrics for basic long-only strategy defined above\n",
                                                                                         "stats_longonly = calculate_statistics(captured_returns_longonly)"],
                                                                                     "execution_count": null,
                                                                                     "outputs": [
                                                                                         {"output_type": "stream",
                                                                                          "text": [
                                                                                              "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                              "Annualised Returns = 7.39%\n",
                                                                                              "Annualised Volatility = 18.60%\n",
                                                                                              "Downside Deviation = 14.10%\n",
                                                                                              "Maximum Drawdown = 20.62%\n",
                                                                                              "Sharpe Ratio = 0.40\n",
                                                                                              "Sortino Ratio = 0.52\n",
                                                                                              "Calmar Ratio = 0.36\n",
                                                                                              "Percentage of positive returns = 52.89%\n",
                                                                                              "Profit/Loss ratio = 0.958\n"],
                                                                                          "name": "stdout"}]},
    {"cell_type": "markdown", "metadata": {"id": "8N6TmFn_9zju"}, "source": ["## 4. Volatility scaling"]},
    {"cell_type": "markdown", "metadata": {"id": "gZIsZlsX-sOW"}, "source": [
        "Before moving on to time series momentum strategies, you will be briefly introduced to volatility scaling.\n",
        "\n",
        "Volatility scaling has been proven to play a crucial role in enhancing the performance of time series momentum strategies. By scaling the returns of an asset by its volatility, you can set it so that each asset targets a consistent amount of risk.\n",
        "Here the target risk, represented by $\\sigma_{tgt}$, will be set to 15%.\n"]},
    {"cell_type": "markdown", "metadata": {"id": "VtBkn5M5nt74"},
     "source": ["**Exercise: Complete the function which calculates scaled returns.**\n", "\\begin{equation}\n",
                "r^\\textrm{scaled}_{t-1,t}=\\dfrac{\\sigma_\\mathrm{tgt}}{\\sigma_{t}}r_{t+1,t}\n",
                "\\end{equation}\n",
                "Here $\\sigma_{t}$ is an ex-ante estimate of the volatility at time $t$. This can be computed using an exponentially weighted moving (EWM) standard deviation of a given span which you will set to be 60 days (see [pandas.DataFrame.ewm](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ewm.html) for more information)."]},
    {"cell_type": "code", "metadata": {"id": "VcplQm4A0pFY"},
     "source": ["VOL_LOOKBACK = 60 # Lookback window for calculating daily volatility\n",
                "VOL_TARGET = 0.15 # Setting annualised volatility target\n", "\n",
                "def volatility_scaled_returns(daily_returns, vol_lookback = VOL_LOOKBACK, vol_target = VOL_TARGET):\n",
                "    \"\"\" Parameters:\n", "            daily_returns: pandas time-series of the daily returns\n",
                "            print_results: bool to print statistics\n", "        Return:\n",
                "            Volatility scaled returns for annualised VOL_TARGET of 15% \"\"\"\n", "    \n",
                "    #  Complete function\n", "    \n", "    ### Enter code here:\n", "    daily_vol = (\n",
                "        daily_returns\n", "        .ewm(span=vol_lookback, min_periods=vol_lookback).std()\n",
                "        .fillna(method=\"bfill\")\n", "    )\n", "    vol = daily_vol * np.sqrt(252) #annualised\n",
                "    scaled_returns = vol_target * daily_returns / vol.shift(1) # shift because ex-ante\n", "    ###\n",
                "    \n", "    return scaled_returns"], "execution_count": null, "outputs": []}, {"cell_type": "code",
                                                                                                  "metadata": {
                                                                                                      "id": "dcsRUejPAm6g",
                                                                                                      "colab": {
                                                                                                          "base_uri": "https://localhost:8080/"},
                                                                                                      "executionInfo": {
                                                                                                          "status": "ok",
                                                                                                          "timestamp": 1626766088459,
                                                                                                          "user_tz": -120,
                                                                                                          "elapsed": 29,
                                                                                                          "user": {
                                                                                                              "displayName": "Graeme Glass",
                                                                                                              "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                                              "userId": "05323015638425264635"}},
                                                                                                      "outputId": "afea73fd-8429-4958-d46a-394cd79f629c"},
                                                                                                  "source": [
                                                                                                      "# Calculate volatility scaled returns\n",
                                                                                                      "data['scaled_returns'] = volatility_scaled_returns(data[\"daily_returns\"])\n",
                                                                                                      "print(f\"Signal annualised volatility: {data['scaled_returns'].std()*np.sqrt(252):.2%}\")"],
                                                                                                  "execution_count": null,
                                                                                                  "outputs": [{
                                                                                                      "output_type": "stream",
                                                                                                      "text": [
                                                                                                          "Signal annualised volatility: 15.49%\n"],
                                                                                                      "name": "stdout"}]},
    {"cell_type": "code", "metadata": {"id": "2TbmXbuQqtWZ"},
     "source": ["data[\"trading_rule_signal\"] = (1 + data[\"scaled_returns\"]).cumprod()\n",
                "data[\"scaled_next_day_returns\"] = data[\"scaled_returns\"].shift(-1)"], "execution_count": null,
     "outputs": []}, {"cell_type": "markdown", "metadata": {"id": "Ka90n5lnrT_M"}, "source": [
        "To emphasise the benefits of volatility scaling, you will next plot the returns and the volatility-scaled returns."]},
    {"cell_type": "code",
     "metadata": {"id": "sv_AeMgZM7Lt", "colab": {"base_uri": "https://localhost:8080/", "height": 269},
                  "executionInfo": {"status": "ok", "timestamp": 1626766088460, "user_tz": -120, "elapsed": 27,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "418abaa6-c3e2-4b23-c891-8c5eb20ee32b"},
     "source": ["captured_returns_volscaled_lo = data[\"scaled_next_day_returns\"][\"1990-01-01\":]\n",
                "# Plot unscaled returns\n",
                "plot_captured_returns(captured_returns_longonly, plot_with_equal_vol = VOL_TARGET)\n",
                "# Plot volatility scaled returns\n",
                "plot_captured_returns(captured_returns_volscaled_lo, plot_with_equal_vol = VOL_TARGET)\n",
                "plt.legend([\"Unscaled\", \"Vol. scaled\"]);"], "execution_count": null, "outputs": [
        {"output_type": "display_data", "data": {
            "image/png": "\n",
            "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
         "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "sGZ8RUUPkC7Q"}, "source": [
        "While you can see that higher cumulative returns are obtained using volatility scaling, you can assess the difference quantitatively by printing the performance metrics for both strategies."]},
    {"cell_type": "code", "metadata": {"id": "Wk2HVTgpNHeR", "colab": {"base_uri": "https://localhost:8080/"},
                                       "executionInfo": {"status": "ok", "timestamp": 1626766088460, "user_tz": -120,
                                                         "elapsed": 26, "user": {"displayName": "Graeme Glass",
                                                                                 "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                 "userId": "05323015638425264635"}},
                                       "outputId": "9e364277-1b5a-4343-96f3-de80293f3769"},
     "source": ["print(\"Vol. scaled long only:\")\n",
                "stats_volscaled_longonly = calculate_statistics(captured_returns_volscaled_lo)"],
     "execution_count": null, "outputs": [{"output_type": "stream", "text": ["Vol. scaled long only:\n",
                                                                             "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                             "Annualised Returns = 8.49%\n",
                                                                             "Annualised Volatility = 15.43%\n",
                                                                             "Downside Deviation = 10.76%\n",
                                                                             "Maximum Drawdown = 11.17%\n",
                                                                             "Sharpe Ratio = 0.55\n",
                                                                             "Sortino Ratio = 0.79\n",
                                                                             "Calmar Ratio = 0.76\n",
                                                                             "Percentage of positive returns = 52.89%\n",
                                                                             "Profit/Loss ratio = 0.975\n"],
                                           "name": "stdout"}]},
    {"cell_type": "markdown", "metadata": {"id": "ALJCLOkXNaSB"}, "source": [
        "Below, you will note how the performance of the unscaled long-only strategy is less impressive than the volatility scaled strategy. "]},
    {"cell_type": "code", "metadata": {"id": "7hwXUeq8kC7Q", "colab": {"base_uri": "https://localhost:8080/"},
                                       "executionInfo": {"status": "ok", "timestamp": 1626766088461, "user_tz": -120,
                                                         "elapsed": 23, "user": {"displayName": "Graeme Glass",
                                                                                 "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                 "userId": "05323015638425264635"}},
                                       "outputId": "6849394d-fa75-4fa1-e318-284c08ab13a6"},
     "source": ["print(\"Unscaled long only:\")\n", "stats_longonly = calculate_statistics(captured_returns_longonly)"],
     "execution_count": null, "outputs": [{"output_type": "stream",
                                           "text": ["Unscaled long only:\n", "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 7.39%\n", "Annualised Volatility = 18.60%\n",
                                                    "Downside Deviation = 14.10%\n", "Maximum Drawdown = 20.62%\n",
                                                    "Sharpe Ratio = 0.40\n", "Sortino Ratio = 0.52\n",
                                                    "Calmar Ratio = 0.36\n",
                                                    "Percentage of positive returns = 52.89%\n",
                                                    "Profit/Loss ratio = 0.958\n"], "name": "stdout"}]},
    {"cell_type": "markdown", "metadata": {"id": "4d3TXdCSrroy", "tags": []}, "source": ["## 5. Time-series momentum"]},
    {"cell_type": "markdown", "metadata": {"id": "NBkGVhkJ_Zdn"}, "source": [
        "For a simple portofolio with a single asset, the returns of a time series momentum (TSMOM) strategy is expressed as:  \n",
        "\\begin{equation}\n", "r_{t+1,t}^\\mathrm{TSMOM}=X_t \\dfrac{\\sigma_\\mathrm{tgt}}{\\sigma_t}r_{t+1,t}.\n",
        "\\end{equation}\n",
        "Here $r_{t+1, t}^{\\mathrm{TSMOM}}$ is the realised return of the strategy from day $t$ to $t+1$. \n", "\n",
        "As before, $r_{t+1,t}$ is the one-day return, $\\sigma_{tgt}$ is the annualised volatility target, set to be 15%, $\\sigma_t$ is the annualised ex-ante volatility, computed using an EWM standard deviation and most importantly, $X_t \\in [-1, 1]$ is the trading rule or signal, where $X_t = -1$ indicates a maximum short position whereas $X_t = 1$ indicates a maximum long position.\n",
        "\n", "\n", "\n",
        "Next, you can look at the simple time series momentum strategy introduced in [Moskowitz et al. 2012](https://www.sciencedirect.com/science/article/pii/S0304405X11002613) and compare this with the benchmark long-only strategy introduced above.\n",
        "\n", "\n",
        "The general idea of a basic time series momentum strategy is to take a maximum long position when the expected trend is positive and a maximum short position when the expected trend is negative. You will use annual returns to predict the trend, then take a decision on what position to take based on this predicted trend.\n",
        "\n", "\n", "Formally, you define this as:\n", "\\begin{equation}\n", "X_t = \\mathrm{sgn}(r_{t-252,t}),\n",
        "\\end{equation}\n", "where we have considered an annual strategy (approx. 252 trading days in a year)."]},
    {"cell_type": "code", "metadata": {"id": "idr59oiSMhyQ"},
     "source": ["# We note that we are using the volatility scaled framework\n",
                "data[\"annual_returns\"] = calc_returns(data[\"srs\"], 252)"], "execution_count": null, "outputs": []},
    {"cell_type": "code",
     "metadata": {"id": "bQzdW1dshGcW", "colab": {"base_uri": "https://localhost:8080/", "height": 269},
                  "executionInfo": {"status": "ok", "timestamp": 1626766088462, "user_tz": -120, "elapsed": 21,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "a9346567-6c46-4746-d8c2-61a2f5d81e07"},
     "source": ["# With the calculated returns, we adjust our trading position accordingly\n",
                "captured_returns_volscaled_tsmom = (\n",
                "    np.sign(data[\"annual_returns\"])*data[\"scaled_next_day_returns\"]\n", ")[\"1990-01-01\":]\n",
                "\n", "# Plot the time-series momentum strategy against the long only strategy\n",
                "plot_captured_returns(captured_returns_volscaled_lo, plot_with_equal_vol = VOL_TARGET)\n",
                "plot_captured_returns(captured_returns_volscaled_tsmom, plot_with_equal_vol = VOL_TARGET)\n",
                "plt.legend([\"Long Only\", \"TSMOM\"]);"], "execution_count": null, "outputs": [
        {"output_type": "display_data", "data": {
            "image/png": "\n",
            "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
         "metadata": {"tags": [], "needs_background": "light"}}]}, {"cell_type": "code",
                                                                    "metadata": {"id": "q3QUrXDNlFG7", "colab": {
                                                                        "base_uri": "https://localhost:8080/"},
                                                                                 "executionInfo": {"status": "ok",
                                                                                                   "timestamp": 1626766088462,
                                                                                                   "user_tz": -120,
                                                                                                   "elapsed": 20,
                                                                                                   "user": {
                                                                                                       "displayName": "Graeme Glass",
                                                                                                       "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                                       "userId": "05323015638425264635"}},
                                                                                 "outputId": "562896ee-d54d-4085-d0b1-b251abd6f6fe"},
                                                                    "source": ["# Calculate performance metrics\n",
                                                                               "stats_volscaled_tsmom = calculate_statistics(captured_returns_volscaled_tsmom)"],
                                                                    "execution_count": null, "outputs": [
            {"output_type": "stream",
             "text": ["\u001b[4mPerformance Metrics:\u001b[0m\n", "Annualised Returns = 9.24%\n",
                      "Annualised Volatility = 15.42%\n", "Downside Deviation = 10.74%\n",
                      "Maximum Drawdown = 11.63%\n", "Sharpe Ratio = 0.60\n", "Sortino Ratio = 0.86\n",
                      "Calmar Ratio = 0.79\n", "Percentage of positive returns = 52.65%\n",
                      "Profit/Loss ratio = 0.992\n"], "name": "stdout"}]},
    {"cell_type": "markdown", "metadata": {"id": "JHffWgO9m0xK"},
     "source": ["**Exercise: Look at the effects of using trends based on different timescales.**\n", "\n", "\n",
                "So far, you have only worked with an annual timescale to estimate the trend. \n",
                "Consequently, plot the returns for a time series momentum strategy with trends estimated over the following timescales:\n",
                "* 1 week\n", "* 1 month\n", "* 1 quarter\n", "* Half a year\n", "\n",
                "Calculate the cumulative returns for these timescales."]}, {"cell_type": "code",
                                                                             "metadata": {"id": "79sfSOwShGCd",
                                                                                          "colab": {
                                                                                              "base_uri": "https://localhost:8080/",
                                                                                              "height": 269},
                                                                                          "executionInfo": {
                                                                                              "status": "ok",
                                                                                              "timestamp": 1626766089688,
                                                                                              "user_tz": -120,
                                                                                              "elapsed": 1242, "user": {
                                                                                                  "displayName": "Graeme Glass",
                                                                                                  "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                                  "userId": "05323015638425264635"}},
                                                                                          "outputId": "37d12791-299a-442d-d082-f0608b9fcfd8"},
                                                                             "source": ["### Enter code here:\n", "\n",
                                                                                        "# List of timescales [1 x week, 1 x month, 1 xquarter, 1/2 x year, 1 x year]\n",
                                                                                        "signal_lookback = [5, 21, 63, 126, 252]\n",
                                                                                        "for lookback in signal_lookback:\n",
                                                                                        "    srs = (\n",
                                                                                        "        np.sign(calc_returns(data[\"srs\"], lookback))\n",
                                                                                        "        *data[\"scaled_next_day_returns\"]\n",
                                                                                        "    )[\"1990-01-01\":]\n",
                                                                                        "    plot_captured_returns(srs,plot_with_equal_vol = VOL_TARGET)\n",
                                                                                        "\n",
                                                                                        "# Plot the returns for varying timescales\n",
                                                                                        "plt.legend(signal_lookback);\n",
                                                                                        "\n", "###"],
                                                                             "execution_count": null, "outputs": [
            {"output_type": "display_data", "data": {
                "image/png": "\n",
                "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
             "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "IMJqx7y3jKqn"}, "source": ["## 6. Combination of signals"]},
    {"cell_type": "markdown", "metadata": {"id": "jecM9V6fjLRu"},
     "source": ["Sometimes, more of a weighting is given to signals measured recently than further back in time.\n",
                "You will next explore how to consider weighting signals using different timescales and how that impacts performance.\n",
                "\n", "**Exercise: Weighting signals using different timescales.**\n", " \n",
                "Try combining the 1 month and 1 year signal with weighting $w$ and $(1-w)$ respectively, where $w \\in \\lbrace 0.0, 0.25, 0.5, 0.75, 1.0 \\rbrace$\n",
                "\\begin{equation}\n",
                "X_t^{(i)} = w \\cdot\\mathrm{sgn}(R_{t-21,t}) + (1-w)\\cdot\\mathrm{sgn}(R_{t-252,t}) \\quad w \\in [0,1]\n",
                "\\end{equation}"]}, {"cell_type": "code", "metadata": {"id": "anVaC1zyjLil",
                                                                        "colab": {"base_uri": "https://localhost:8080/",
                                                                                  "height": 1000},
                                                                        "executionInfo": {"status": "ok",
                                                                                          "timestamp": 1626766089689,
                                                                                          "user_tz": -120,
                                                                                          "elapsed": 18, "user": {
                                                                                "displayName": "Graeme Glass",
                                                                                "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                "userId": "05323015638425264635"}},
                                                                        "outputId": "3731f6f2-4ae3-4fc2-d107-f859951c09e8"},
                                      "source": ["### Enter code here:\n", "\n", "# List of weights\n",
                                                 "ws = [0.0, 0.25, 0.5, 0.75, 1.0]\n",
                                                 "# Loop over weight and calculate performance metrics\n",
                                                 "for w in ws:\n", "    srs = (\n",
                                                 "        w * np.sign(calc_returns(data[\"trading_rule_signal\"], 21)) \n",
                                                 "        * data[\"scaled_next_day_returns\"]\n",
                                                 "        +  (1-w) * np.sign(calc_returns(data[\"srs\"], 252)) \n",
                                                 "        * data[\"scaled_next_day_returns\"]\n",
                                                 "    )[\"1990-01-01\":]\n",
                                                 "    plot_captured_returns(srs, plot_with_equal_vol = VOL_TARGET)\n",
                                                 "    print(f\"w = {w}\")\n", "    calculate_statistics(srs)\n",
                                                 "    print()\n", "\n", "plt.legend(ws);\n", "\n", "###"],
                                      "execution_count": null, "outputs": [{"output_type": "stream",
                                                                            "text": ["w = 0.0\n",
                                                                                     "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                     "Annualised Returns = 9.24%\n",
                                                                                     "Annualised Volatility = 15.42%\n",
                                                                                     "Downside Deviation = 10.74%\n",
                                                                                     "Maximum Drawdown = 11.63%\n",
                                                                                     "Sharpe Ratio = 0.60\n",
                                                                                     "Sortino Ratio = 0.86\n",
                                                                                     "Calmar Ratio = 0.79\n",
                                                                                     "Percentage of positive returns = 52.65%\n",
                                                                                     "Profit/Loss ratio = 0.992\n",
                                                                                     "\n", "w = 0.25\n",
                                                                                     "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                     "Annualised Returns = 6.70%\n",
                                                                                     "Annualised Volatility = 13.10%\n",
                                                                                     "Downside Deviation = 9.69%\n",
                                                                                     "Maximum Drawdown = 11.63%\n",
                                                                                     "Sharpe Ratio = 0.51\n",
                                                                                     "Sortino Ratio = 0.69\n",
                                                                                     "Calmar Ratio = 0.58\n",
                                                                                     "Percentage of positive returns = 52.65%\n",
                                                                                     "Profit/Loss ratio = 0.982\n",
                                                                                     "\n", "w = 0.5\n",
                                                                                     "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                     "Annualised Returns = 4.16%\n",
                                                                                     "Annualised Volatility = 12.23%\n",
                                                                                     "Downside Deviation = 11.01%\n",
                                                                                     "Maximum Drawdown = 11.63%\n",
                                                                                     "Sharpe Ratio = 0.34\n",
                                                                                     "Sortino Ratio = 0.38\n",
                                                                                     "Calmar Ratio = 0.36\n",
                                                                                     "Percentage of positive returns = 32.46%\n",
                                                                                     "Profit/Loss ratio = 0.990\n",
                                                                                     "\n", "w = 0.75\n",
                                                                                     "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                     "Annualised Returns = 1.61%\n",
                                                                                     "Annualised Volatility = 13.10%\n",
                                                                                     "Downside Deviation = 9.46%\n",
                                                                                     "Maximum Drawdown = 11.63%\n",
                                                                                     "Sharpe Ratio = 0.12\n",
                                                                                     "Sortino Ratio = 0.17\n",
                                                                                     "Calmar Ratio = 0.14\n",
                                                                                     "Percentage of positive returns = 49.83%\n",
                                                                                     "Profit/Loss ratio = 1.027\n",
                                                                                     "\n", "w = 1.0\n",
                                                                                     "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                                                     "Annualised Returns = -0.93%\n",
                                                                                     "Annualised Volatility = 15.44%\n",
                                                                                     "Downside Deviation = 10.44%\n",
                                                                                     "Maximum Drawdown = 12.45%\n",
                                                                                     "Sharpe Ratio = -0.06\n",
                                                                                     "Sortino Ratio = -0.09\n",
                                                                                     "Calmar Ratio = -0.07\n",
                                                                                     "Percentage of positive returns = 49.83%\n",
                                                                                     "Profit/Loss ratio = 0.995\n",
                                                                                     "\n"], "name": "stdout"},
                                                                           {"output_type": "display_data", "data": {
                                                                               "image/png": "\n",
                                                                               "text/plain": [
                                                                                   "<Figure size 432x288 with 1 Axes>"]},
                                                                            "metadata": {"tags": [],
                                                                                         "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "L4JnLeu_q_bW"},
     "source": ["## 7. Moving Average Convergence Divergence (MACD)"]},
    {"cell_type": "markdown", "metadata": {"id": "lO04nqDqOmpZ"},
     "source": ["The time series momentum strategy introduced above is a simple trading rule.\n",
                "Since the inception of time series momentum, more sophisticated methods have been proposed.\n",
                "Next, you will consider the work introduced in [Baz et al. 2015](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2695101), which focuses on the volatility-normalised moving average convergence divergence (MACD) indicators.\n",
                "\n",
                "The trend estimator, $Y_t$, and position sizing, $X_t$, are obtained through the following steps:\n",
                "1. Compute the MACD signal as the difference between a short (S) and long (L) EWM average (EWMA) of the price $p_t$ (here (S, L) could be (32, 96) days):\n",
                "\\begin{equation}\n", "MACD(t,S,L) = EWMA(p_t,S) - EWMA(p_t,L)\n", "\\end{equation}\n",
                "2. Normalise the MACD signal with the EWM standard deviation (EWMSTD) of price of span 63 days.\n",
                "\\begin{equation}\n", " q_t = \\frac{MACD(t, S, L)}{EWMSTD(p_t,63)}\n", "\\end{equation}\n",
                "3. Standardise the signal with an EWM standard deviation of itself of span 252 days.\n",
                "\\begin{equation}\n", "Y_t = \\dfrac{q_t}{EWMSTD(q_t,252)}\n", "\\end{equation}\n",
                "4. Finally we transform the signal by a squashing/response function\n", "\\begin{equation}\n",
                "X_t = \\phi(Y_t), \\quad \\textrm{where} \\quad \\phi(y)=\\frac{y\\exp\\left(\\frac{-y^2}{4}\\right)}{0.89}.\n",
                "\\end{equation}\n", "Comments on the response function and its meaning are expanded on below.\n", "\n",
                "Multiple signals with different timescales can also be averaged to give a final position:\n",
                "\\begin{equation}\n", "\\tilde{Y}_t=\\frac{1}{3}\\sum^3_{k=1}Y_t(S_k,L_k).\n", "\\end{equation}\n",
                "\n",
                "Note that the timescale S (or L), as defined in the above paper, corresponds to `1/alpha` in terms of the smoothing factor `alpha` used in the `pandas.ewm` function. Alternatively, you could also use `span=2*S-1`\n",
                "\n", "Below, the code for the MACD strategy as defined above is provided."]},
    {"cell_type": "code", "metadata": {"id": "pWw3VzK1rRvV", "tags": []},
     "source": ["# Define position sizing function\n", "def phi(y):\n", "    return y * np.exp(-(y ** 2) / 4) / 0.89\n",
                "\n",
                "MACD_TREND_COMBINATIONS = [(8, 24), (16, 48), (32, 96)] # short and long trend combinations used for MACD\n",
                "\n", "class MACDStrategy:\n", "    def __init__(self, trend_combinations=None):\n",
                "        # Setting parameters\n", "        self.x_vol_window = 63\n",
                "        self.y_vol_window = 252\n", "\n", "        if trend_combinations is None:\n",
                "            self.trend_combinations = MACD_TREND_COMBINATIONS\n", "        else:\n",
                "            self.trend_combinations = trend_combinations\n", "\n",
                "    def compute_indiv_signal(self, prices, short_window, long_window):\n",
                "        # Compute individual signals\n", "\n", "        # Compute trend over short timescale\n",
                "        short_trend = prices.ewm(alpha=1.0/short_window).mean()\n",
                "        # Compute trend over long timescale\n",
                "        long_trend = prices.ewm(alpha=1.0/long_window).mean()\n", "\n",
                "        x = short_trend - long_trend\n",
                "        y = x / prices.rolling(self.x_vol_window).std().fillna(method=\"bfill\")\n",
                "        z = y / y.rolling(self.y_vol_window).std().fillna(method=\"bfill\")\n", "        return z\n",
                "\n", "    def get_signal(self, prices):\n", "        # Calculate combined signal\n",
                "        trend_combinations = self.trend_combinations\n", "        signal_df = None\n", "        \n",
                "        for short_window, long_window in trend_combinations:\n", "\n",
                "            indiv_signal = self.compute_indiv_signal(prices, short_window, long_window)\n", "\n",
                "            if signal_df is None:\n", "                signal_df = phi(indiv_signal)\n",
                "            else:\n", "                signal_df += phi(indiv_signal)\n", "\n",
                "        return signal_df / len(trend_combinations)"], "execution_count": null, "outputs": []},
    {"cell_type": "markdown", "metadata": {"id": "fbqVd89zkC7T"},
     "source": ["Next, look closer at the response function $\\phi(y)$ defined above."]}, {"cell_type": "code",
                                                                                           "metadata": {
                                                                                               "id": "HkoW0SWJsRJG",
                                                                                               "colab": {
                                                                                                   "base_uri": "https://localhost:8080/",
                                                                                                   "height": 265},
                                                                                               "executionInfo": {
                                                                                                   "status": "ok",
                                                                                                   "timestamp": 1626766089690,
                                                                                                   "user_tz": -120,
                                                                                                   "elapsed": 13,
                                                                                                   "user": {
                                                                                                       "displayName": "Graeme Glass",
                                                                                                       "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                                       "userId": "05323015638425264635"}},
                                                                                               "outputId": "d29dc54a-eaeb-4434-a268-4c4d41a3ce68"},
                                                                                           "source": [
                                                                                               "x = np.linspace(-5,5, 100)\n",
                                                                                               "plt.plot(x,phi(x));"],
                                                                                           "execution_count": null,
                                                                                           "outputs": [{
                                                                                               "output_type": "display_data",
                                                                                               "data": {
                                                                                                   "image/png": "\n",
                                                                                                   "text/plain": [
                                                                                                       "<Figure size 432x288 with 1 Axes>"]},
                                                                                               "metadata": {
                                                                                                   "tags": [],
                                                                                                   "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "UAWRXF8lkC7T"}, "source": [
        "You can see that positions are increased until $\\left|Y_t\\right| = \\sqrt{2}$, before decreasing back to zero for larger moves. The idea is that you are less certain of larger moves and thus downscale the signal.\n",
        "\n",
        "Next, calculate the (volatility-scaled) returns using the combined MACD strategy for different lookback filters and compare these strategies to the long-only strategy."]},
    {"cell_type": "code",
     "metadata": {"id": "Co82sh9QkC7T", "colab": {"base_uri": "https://localhost:8080/", "height": 269},
                  "executionInfo": {"status": "ok", "timestamp": 1626766089690, "user_tz": -120, "elapsed": 11,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "7c71bddd-9c64-4b0d-fefb-5b42f2668474"},
     "source": ["# Calculate returns using MACD\n", "captured_returns_volscaled_macd = (\n",
                "    MACDStrategy().get_signal(data[\"srs\"])*data[\"scaled_next_day_returns\"]\n",
                ")[\"1990-01-01\":]\n", "\n", "# Plot cumulative returns of MACD vs. Long only\n",
                "plot_captured_returns(captured_returns_volscaled_lo, plot_with_equal_vol = VOL_TARGET)\n",
                "plot_captured_returns(captured_returns_volscaled_macd, plot_with_equal_vol = VOL_TARGET)\n",
                "plt.legend([\"Long Only\", \"MACD\"]);"], "execution_count": null, "outputs": [
        {"output_type": "display_data", "data": {
            "image/png": "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\n",
            "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
         "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "8pZsN-VZkC7U"}, "source": [
        "Using a combination of signals and averaging them seems to give less than satisfactory results. Consequently, you can study and plot the performances of the filters listed in MACD_TREND_COMBINATIONS instead.\n",
        "\n",
        "**Exercise: Calculate the returns using MACD and the different filters within the list MACD_TREND_COMBINATIONS.** \n",
        "\n",
        "Once calculated, plot the captured returns, rescaling the time series to have 15% volume in order to compare between them. \n"]},
    {"cell_type": "code",
     "metadata": {"id": "5hc4FUZekC7U", "colab": {"base_uri": "https://localhost:8080/", "height": 1000},
                  "executionInfo": {"status": "ok", "timestamp": 1626766090761, "user_tz": -120, "elapsed": 1081,
                                    "user": {"displayName": "Graeme Glass",
                                             "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                             "userId": "05323015638425264635"}},
                  "outputId": "af70d954-777c-4214-9312-f31a1483cb1f"},
     "source": ["### Enter code here:\n", "\n", "# Plot cumulative returns of Long only\n",
                "plot_captured_returns(captured_returns_volscaled_lo)\n",
                "# Print performance metrics for long only strategy\n", "print(\"\\nLong Only:\")\n",
                "calculate_statistics(captured_returns_volscaled_lo)\n", "\n",
                "# Plot cumulative returns of TSMOM with lookback of 252\n",
                "plot_captured_returns(captured_returns_volscaled_tsmom)\n", "print(\"\\nTSMOM: \")\n",
                "calculate_statistics(captured_returns_volscaled_tsmom)\n", "\n",
                "legends = [\"Long only\", \"TSMOM\"]\n", "# Calculate returns using MACD\n",
                "for windows in MACD_TREND_COMBINATIONS:\n", "    captured_returns_volscaled_macd = (\n",
                "        MACDStrategy([windows]).get_signal(data[\"srs\"])*data[\"scaled_next_day_returns\"])[\"1990-01-01\":]\n",
                "    legends.append(str(windows))\n", "    print(\"\\n(S,L) = \" + str(windows) + \":\")\n",
                "    print(\"vol: \")\n",
                "    plot_captured_returns(captured_returns_volscaled_macd, plot_with_equal_vol = VOL_TARGET)\n",
                "    calculate_statistics(captured_returns_volscaled_macd)\n", "plt.legend(legends);\n", "\n", "###"],
     "execution_count": null, "outputs": [{"output_type": "stream",
                                           "text": ["\n", "Long Only:\n", "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 8.49%\n", "Annualised Volatility = 15.43%\n",
                                                    "Downside Deviation = 10.76%\n", "Maximum Drawdown = 11.17%\n",
                                                    "Sharpe Ratio = 0.55\n", "Sortino Ratio = 0.79\n",
                                                    "Calmar Ratio = 0.76\n",
                                                    "Percentage of positive returns = 52.89%\n",
                                                    "Profit/Loss ratio = 0.975\n", "\n", "TSMOM: \n",
                                                    "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 9.24%\n", "Annualised Volatility = 15.42%\n",
                                                    "Downside Deviation = 10.74%\n", "Maximum Drawdown = 11.63%\n",
                                                    "Sharpe Ratio = 0.60\n", "Sortino Ratio = 0.86\n",
                                                    "Calmar Ratio = 0.79\n",
                                                    "Percentage of positive returns = 52.65%\n",
                                                    "Profit/Loss ratio = 0.992\n", "\n", "(S,L) = (8, 24):\n",
                                                    "vol: \n", "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 2.42%\n", "Annualised Volatility = 12.23%\n",
                                                    "Downside Deviation = 9.02%\n", "Maximum Drawdown = 11.57%\n",
                                                    "Sharpe Ratio = 0.20\n", "Sortino Ratio = 0.27\n",
                                                    "Calmar Ratio = 0.21\n",
                                                    "Percentage of positive returns = 51.08%\n",
                                                    "Profit/Loss ratio = 0.990\n", "\n", "(S,L) = (16, 48):\n",
                                                    "vol: \n", "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 3.20%\n", "Annualised Volatility = 10.80%\n",
                                                    "Downside Deviation = 8.19%\n", "Maximum Drawdown = 8.23%\n",
                                                    "Sharpe Ratio = 0.30\n", "Sortino Ratio = 0.39\n",
                                                    "Calmar Ratio = 0.39\n",
                                                    "Percentage of positive returns = 51.58%\n",
                                                    "Profit/Loss ratio = 0.989\n", "\n", "(S,L) = (32, 96):\n",
                                                    "vol: \n", "\u001b[4mPerformance Metrics:\u001b[0m\n",
                                                    "Annualised Returns = 5.83%\n", "Annualised Volatility = 10.04%\n",
                                                    "Downside Deviation = 7.90%\n", "Maximum Drawdown = 8.39%\n",
                                                    "Sharpe Ratio = 0.58\n", "Sortino Ratio = 0.74\n",
                                                    "Calmar Ratio = 0.69\n",
                                                    "Percentage of positive returns = 52.69%\n",
                                                    "Profit/Loss ratio = 1.003\n"], "name": "stdout"},
                                          {"output_type": "display_data", "data": {
                                              "image/png": "\n",
                                              "text/plain": ["<Figure size 432x288 with 1 Axes>"]},
                                           "metadata": {"tags": [], "needs_background": "light"}}]},
    {"cell_type": "markdown", "metadata": {"id": "QMvwwPKU7hqv"},
     "source": ["## 8. Use cases of momentum strategies in portfolio construction"]},
    {"cell_type": "markdown", "metadata": {"id": "WNyW79eV7lm2"}, "source": [
        "Momentum strategies, as offered by commodity trading advisors (CTAs), have been popular diversifiers in portfolios of, for example, pension funds. Even if returns are small, but the strategy has low correlation with the long-only strategy, you can build portfolios which can outperform long-only strategies in risk-adjusted terms."]},
    {"cell_type": "markdown", "metadata": {"id": "m1KmURs85ACY"},
     "source": ["**Exercise: Portfolio construction**\n", "\n",
                "Above, you defined the volatility-scaled long-only and time series momentum strategies and stored the return series in the variables `captured_returns_volscaled_l` and `captured_returns_volscaled_tsmom`, respectively. For this exercise:\n",
                "\n", "a) Compute the correlations between the two return series.\n", "\n",
                "b) Build a portfolio which is equally weighted between the long-only and time series momentum strategies. This makes sense given that the strategies have similar volatility (both target 15%) and similar returns. Alternatively, you can also construct the optimal portfolio in a Markowitz sense. Plot the returns of the portfolio and compare it to the individual strategies. "]},
    {"cell_type": "code", "metadata": {"id": "Vv1qLDWbkC7U", "colab": {"base_uri": "https://localhost:8080/"},
                                       "executionInfo": {"status": "ok", "timestamp": 1626766090762, "user_tz": -120,
                                                         "elapsed": 17, "user": {"displayName": "Graeme Glass",
                                                                                 "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                 "userId": "05323015638425264635"}},
                                       "outputId": "d899142b-999f-48bc-9dd3-f08034cac940"},
     "source": ["### Part A\n", "### Enter code here:\n", "\n",
                "captured_returns_volscaled_lo.corr(captured_returns_volscaled_tsmom)\n", "\n",
                "# We observe around 50% correlation which is not too bad, but ideally could be lower. \n",
                "# Better results can be obtained on average when looking at larger universes of financial instruments.\n",
                "\n", "###"], "execution_count": null, "outputs": [
        {"output_type": "execute_result", "data": {"text/plain": ["0.49234078883689053"]}, "metadata": {"tags": []},
         "execution_count": 30}]}, {"cell_type": "code", "metadata": {"id": "VScf03x-kC7V",
                                                                      "colab": {"base_uri": "https://localhost:8080/",
                                                                                "height": 439},
                                                                      "executionInfo": {"status": "ok",
                                                                                        "timestamp": 1626766090762,
                                                                                        "user_tz": -120, "elapsed": 13,
                                                                                        "user": {
                                                                                            "displayName": "Graeme Glass",
                                                                                            "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GhrfN-8zNMEyHR1ip1C6APD_vPReW7Y6VI2p2Hn=s64",
                                                                                            "userId": "05323015638425264635"}},
                                                                      "outputId": "2d64cbfd-f14b-4882-ed81-83ef7754b606"},
                                    "source": ["### Part B\n", "### Enter code here:\n", "\n",
                                               "calculate_statistics(0.5*(captured_returns_volscaled_lo+captured_returns_volscaled_tsmom))\n",
                                               "plot_captured_returns(0.5*(captured_returns_volscaled_lo+captured_returns_volscaled_tsmom), plot_with_equal_vol = VOL_TARGET)\n",
                                               "plot_captured_returns(captured_returns_volscaled_lo, plot_with_equal_vol = VOL_TARGET)\n",
                                               "plot_captured_returns(captured_returns_volscaled_tsmom, plot_with_equal_vol = VOL_TARGET)\n",
                                               "\n", "\n", "# We observe overall better risk adjusted returns. \n",
                                               "# Interestingly, the TSMOM strategy is anti-correlated during the aftermath of the dot com and subprime crises. \n",
                                               "# Thus the portfolio avoids some of the drawdowns the long only strategy sees during those periods. \n",
                                               "\n", "###"], "execution_count": null, "outputs": [
            {"output_type": "stream",
             "text": ["\u001b[4mPerformance Metrics:\u001b[0m\n", "Annualised Returns = 8.87%\n",
                      "Annualised Volatility = 13.32%\n", "Downside Deviation = 11.05%\n",
                      "Maximum Drawdown = 10.96%\n", "Sharpe Ratio = 0.67\n", "Sortino Ratio = 0.80\n",
                      "Calmar Ratio = 0.81\n", "Percentage of positive returns = 39.90%\n",
                      "Profit/Loss ratio = 0.978\n"], "name": "stdout"}, {"output_type": "display_data", "data": {
                "image/png": "\n",
                "text/plain": ["<Figure size 432x288 with 1 Axes>"]}, "metadata": {"tags": [],
                                                                                   "needs_background": "light"}}]}]}
